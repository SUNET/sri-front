"""This class is used for the choices available in a dropdown"""
type Choice implements KeyValue {
  name: String!
  value: String!
}

"""A contact in the SRI system"""
type Contact implements Node {
  handle_id: ID!
  node_name: String!
  node_meta_type: NodeHandleNodeMetaType!
  creator: User!
  created: DateTime!
  modifier: User!
  modified: DateTime!

  """The ID of the object."""
  id: ID!
  nidata: [DictEntryType]
  incoming: [DictRelationType]
  outgoing: [DictRelationType]
  name: String!
  first_name: String!
  last_name: String!
  title: String
  salutation: String
  contact_type: String
  phone: String
  mobile: String
  email: String
  other_email: String
  PGP_fingerprint: String
  member_of_groups: [Group]
  roles: [Role]
}

type ContactConnection {
  pageInfo: PageInfo!
  edges: [ContactEdge]!
}

type ContactEdge {
  """The item at the end of the edge"""
  node: Contact

  """A cursor for use in pagination"""
  cursor: String!
}

input ContactFilter {
  AND: [ContactNestedFilter!]
  OR: [ContactNestedFilter!]
}

input ContactNestedFilter {
  name: String
  name_not: String
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_in: [String!]
  name_not_in: [String!]
  first_name: String
  first_name_not: String
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  last_name: String
  last_name_not: String
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  title: String
  title_not: String
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_in: [String!]
  title_not_in: [String!]
  salutation: String
  salutation_not: String
  salutation_lt: String
  salutation_lte: String
  salutation_gt: String
  salutation_gte: String
  salutation_contains: String
  salutation_not_contains: String
  salutation_starts_with: String
  salutation_not_starts_with: String
  salutation_ends_with: String
  salutation_not_ends_with: String
  salutation_in: [String!]
  salutation_not_in: [String!]
  contact_type: String
  contact_type_not: String
  contact_type_lt: String
  contact_type_lte: String
  contact_type_gt: String
  contact_type_gte: String
  contact_type_contains: String
  contact_type_not_contains: String
  contact_type_starts_with: String
  contact_type_not_starts_with: String
  contact_type_ends_with: String
  contact_type_not_ends_with: String
  contact_type_in: [String!]
  contact_type_not_in: [String!]
  phone: String
  phone_not: String
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  phone_in: [String!]
  phone_not_in: [String!]
  mobile: String
  mobile_not: String
  mobile_lt: String
  mobile_lte: String
  mobile_gt: String
  mobile_gte: String
  mobile_contains: String
  mobile_not_contains: String
  mobile_starts_with: String
  mobile_not_starts_with: String
  mobile_ends_with: String
  mobile_not_ends_with: String
  mobile_in: [String!]
  mobile_not_in: [String!]
  email: String
  email_not: String
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_in: [String!]
  email_not_in: [String!]
  other_email: String
  other_email_not: String
  other_email_lt: String
  other_email_lte: String
  other_email_gt: String
  other_email_gte: String
  other_email_contains: String
  other_email_not_contains: String
  other_email_starts_with: String
  other_email_not_starts_with: String
  other_email_ends_with: String
  other_email_not_ends_with: String
  other_email_in: [String!]
  other_email_not_in: [String!]
  PGP_fingerprint: String
  PGP_fingerprint_not: String
  PGP_fingerprint_lt: String
  PGP_fingerprint_lte: String
  PGP_fingerprint_gt: String
  PGP_fingerprint_gte: String
  PGP_fingerprint_contains: String
  PGP_fingerprint_not_contains: String
  PGP_fingerprint_starts_with: String
  PGP_fingerprint_not_starts_with: String
  PGP_fingerprint_ends_with: String
  PGP_fingerprint_not_ends_with: String
  PGP_fingerprint_in: [String!]
  PGP_fingerprint_not_in: [String!]
  member_of_groups: GroupInputField
  member_of_groups_not: GroupInputField
  member_of_groups_lt: GroupInputField
  member_of_groups_lte: GroupInputField
  member_of_groups_gt: GroupInputField
  member_of_groups_gte: GroupInputField
  member_of_groups_in: [GroupInputField!]
  member_of_groups_not_in: [GroupInputField!]
  roles: RoleInputField
  roles_not: RoleInputField
  roles_lt: RoleInputField
  roles_lte: RoleInputField
  roles_gt: RoleInputField
  roles_gte: RoleInputField
  roles_in: [RoleInputField!]
  roles_not_in: [RoleInputField!]
  handle_id: Int
  handle_id_not: Int
  handle_id_lt: Int
  handle_id_lte: Int
  handle_id_gt: Int
  handle_id_gte: Int
  handle_id_in: [Int!]
  handle_id_not_in: [Int!]
}

"""An enumeration."""
enum ContactOrderBy {
  name_ASC
  name_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  title_ASC
  title_DESC
  salutation_ASC
  salutation_DESC
  contact_type_ASC
  contact_type_DESC
  phone_ASC
  phone_DESC
  mobile_ASC
  mobile_DESC
  email_ASC
  email_DESC
  other_email_ASC
  other_email_DESC
  PGP_fingerprint_ASC
  PGP_fingerprint_DESC
  handle_id_ASC
  handle_id_DESC
}

input CreateNIContactMutationInput {
  first_name: String!
  last_name: String!
  contact_type: String!
  mobile: String
  phone: String
  salutation: String
  email: String
  other_email: String
  name: String
  title: String
  PGP_fingerprint: String
  clientMutationId: String
}

type CreateNIContactMutationPayload {
  contact: Contact
  clientMutationId: String
}

input CreateNIGroupMutationInput {
  name: String!
  clientMutationId: String
}

type CreateNIGroupMutationPayload {
  group: Group
  clientMutationId: String
}

input CreateNIOrganizationMutationInput {
  account_id: String
  name: String!
  description: String
  phone: String
  website: String
  customer_id: String
  type: String
  additional_info: String
  abuse_contact: String
  primary_contact: String
  secondary_contact: String
  it_technical_contact: String
  it_security_contact: String
  it_manager_contact: String
  clientMutationId: String
}

type CreateNIOrganizationMutationPayload {
  organization: Organization
  clientMutationId: String
}

input CreateNIProcedureMutationInput {
  name: String!
  description: String
  clientMutationId: String
}

type CreateNIProcedureMutationPayload {
  procedure: Procedure
  clientMutationId: String
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

input DeleteNIContactMutationInput {
  handle_id: Int!
  clientMutationId: String
}

type DeleteNIContactMutationPayload {
  success: Boolean!
  clientMutationId: String
}

input DeleteNIGroupMutationInput {
  handle_id: Int!
  clientMutationId: String
}

type DeleteNIGroupMutationPayload {
  success: Boolean!
  clientMutationId: String
}

input DeleteNIOrganizationMutationInput {
  handle_id: Int!
  clientMutationId: String
}

type DeleteNIOrganizationMutationPayload {
  success: Boolean!
  clientMutationId: String
}

input DeleteNIProcedureMutationInput {
  handle_id: Int!
  clientMutationId: String
}

type DeleteNIProcedureMutationPayload {
  success: Boolean!
  clientMutationId: String
}

input DeleteRelationshipInput {
  relation_id: Int!
  clientMutationId: String
}

type DeleteRelationshipPayload {
  success: Boolean!
  relation_id: Int!
  clientMutationId: String
}

"""
This type represents an key value pair in a dictionary for the data
dict of the norduniclient nodes
"""
type DictEntryType implements KeyValue {
  name: String!
  value: String!
}

"""
This type represents an key value pair for a relationship dictionary,
the key is the name of the relationship and the value the NIRelationType itself
"""
type DictRelationType {
  name: String!
  relation: NIRelationType!
}

"""This class represents a dropdown to use in forms"""
type Dropdown {
  id: ID!
  name: String!
}

"""The group type is used to group contacts"""
type Group implements Node {
  handle_id: ID!
  node_name: String!
  node_meta_type: NodeHandleNodeMetaType!
  creator: User!
  created: DateTime!
  modifier: User!
  modified: DateTime!

  """The ID of the object."""
  id: ID!
  nidata: [DictEntryType]
  incoming: [DictRelationType]
  outgoing: [DictRelationType]
  name: String!
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
}

type GroupEdge {
  """The item at the end of the edge"""
  node: Group

  """A cursor for use in pagination"""
  cursor: String!
}

input GroupFilter {
  AND: [GroupNestedFilter!]
  OR: [GroupNestedFilter!]
}

input GroupInputField {
  name: String
  handle_id: Int
}

input GroupNestedFilter {
  name: String
  name_not: String
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_in: [String!]
  name_not_in: [String!]
  handle_id: Int
  handle_id_not: Int
  handle_id_lt: Int
  handle_id_lte: Int
  handle_id_gt: Int
  handle_id_gte: Int
  handle_id_in: [Int!]
  handle_id_not_in: [Int!]
}

"""An enumeration."""
enum GroupOrderBy {
  name_ASC
  name_DESC
  handle_id_ASC
  handle_id_DESC
}

"""A host in the SRI system"""
type Host implements Node {
  handle_id: ID!
  node_name: String!
  node_meta_type: NodeHandleNodeMetaType!
  creator: User!
  created: DateTime!
  modifier: User!
  modified: DateTime!

  """The ID of the object."""
  id: ID!
  nidata: [DictEntryType]
  incoming: [DictRelationType]
  outgoing: [DictRelationType]
  ip_addresses: IPAddr
  name: String!
  operational_state: String!
  os: String
  os_version: String
  vendor: String
  backup: String
  managed_by: String
  description: String
  responsible_group: String
  support_group: String
  security_class: String
  security_comment: String
}

"""IPAddr scalar to be matched with the IPAddrField in a django form"""
scalar IPAddr

interface KeyValue {
  name: String!
  value: String!
}

type Mutation {
  create_group(input: CreateNIGroupMutationInput!): CreateNIGroupMutationPayload
  update_group(input: UpdateNIGroupMutationInput!): UpdateNIGroupMutationPayload
  delete_group(input: DeleteNIGroupMutationInput!): DeleteNIGroupMutationPayload
  create_procedure(input: CreateNIProcedureMutationInput!): CreateNIProcedureMutationPayload
  update_procedure(input: UpdateNIProcedureMutationInput!): UpdateNIProcedureMutationPayload
  delete_procedure(input: DeleteNIProcedureMutationInput!): DeleteNIProcedureMutationPayload
  create_contact(input: CreateNIContactMutationInput!): CreateNIContactMutationPayload
  update_contact(input: UpdateNIContactMutationInput!): UpdateNIContactMutationPayload
  delete_contact(input: DeleteNIContactMutationInput!): DeleteNIContactMutationPayload
  create_organization(input: CreateNIOrganizationMutationInput!): CreateNIOrganizationMutationPayload
  update_organization(input: UpdateNIOrganizationMutationInput!): UpdateNIOrganizationMutationPayload
  delete_organization(input: DeleteNIOrganizationMutationInput!): DeleteNIOrganizationMutationPayload
  delete_relationship(input: DeleteRelationshipInput!): DeleteRelationshipPayload
}

type Neo4jChoice implements KeyValue {
  name: String!
  value: String!
}

"""
This class expands graphene_django object type adding the defined fields in
the types subclasses and extracts the data from the norduniclient nodes and
adds a resolver for each field, a nidata field is also added to hold the
values of the node data dict.
"""
type NIObjectType implements Node {
  handle_id: ID!
  node_name: String!
  node_meta_type: NodeHandleNodeMetaType!
  creator: User!
  created: DateTime!
  modifier: User!
  modified: DateTime!

  """The ID of the object."""
  id: ID!
  nidata: [DictEntryType]
  incoming: [DictRelationType]
  outgoing: [DictRelationType]
}

"""This class represents a relationship and its properties"""
type NIRelationType implements Node {
  """The ID of the object."""
  id: ID!
  relation_id: Int!
  type: String!
  start: Int!
  end: Int!
  nidata: [DictEntryType]
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""An enumeration."""
enum NodeHandleNodeMetaType {
  """Physical"""
  PHYSICAL

  """Logical"""
  LOGICAL

  """Relation"""
  RELATION

  """Location"""
  LOCATION
}

type NodeHandler implements Node {
  handle_id: ID!
  node_name: String!
  node_meta_type: NodeHandleNodeMetaType!
  creator: User!
  created: DateTime!
  modifier: User!
  modified: DateTime!

  """The ID of the object."""
  id: ID!
  nidata: [DictEntryType]
  incoming: [DictRelationType]
  outgoing: [DictRelationType]
  name: String!
}

"""The group type is used to group contacts"""
type Organization implements Node {
  handle_id: ID!
  node_name: String!
  node_meta_type: NodeHandleNodeMetaType!
  creator: User!
  created: DateTime!
  modifier: User!
  modified: DateTime!

  """The ID of the object."""
  id: ID!
  nidata: [DictEntryType]
  incoming: [DictRelationType]
  outgoing: [DictRelationType]
  name: String!
  description: String!
  phone: String
  website: String
  customer_id: String
  additional_info: String
}

type OrganizationConnection {
  pageInfo: PageInfo!
  edges: [OrganizationEdge]!
}

type OrganizationEdge {
  """The item at the end of the edge"""
  node: Organization

  """A cursor for use in pagination"""
  cursor: String!
}

input OrganizationFilter {
  AND: [OrganizationNestedFilter!]
  OR: [OrganizationNestedFilter!]
}

input OrganizationNestedFilter {
  name: String
  name_not: String
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_in: [String!]
  name_not_in: [String!]
  description: String
  description_not: String
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_in: [String!]
  description_not_in: [String!]
  phone: String
  phone_not: String
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  phone_in: [String!]
  phone_not_in: [String!]
  website: String
  website_not: String
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  website_in: [String!]
  website_not_in: [String!]
  customer_id: String
  customer_id_not: String
  customer_id_lt: String
  customer_id_lte: String
  customer_id_gt: String
  customer_id_gte: String
  customer_id_contains: String
  customer_id_not_contains: String
  customer_id_starts_with: String
  customer_id_not_starts_with: String
  customer_id_ends_with: String
  customer_id_not_ends_with: String
  customer_id_in: [String!]
  customer_id_not_in: [String!]
  additional_info: String
  additional_info_not: String
  additional_info_lt: String
  additional_info_lte: String
  additional_info_gt: String
  additional_info_gte: String
  additional_info_contains: String
  additional_info_not_contains: String
  additional_info_starts_with: String
  additional_info_not_starts_with: String
  additional_info_ends_with: String
  additional_info_not_ends_with: String
  additional_info_in: [String!]
  additional_info_not_in: [String!]
  handle_id: Int
  handle_id_not: Int
  handle_id_lt: Int
  handle_id_lte: Int
  handle_id_gt: Int
  handle_id_gte: Int
  handle_id_in: [Int!]
  handle_id_not_in: [Int!]
}

"""An enumeration."""
enum OrganizationOrderBy {
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  phone_ASC
  phone_DESC
  website_ASC
  website_DESC
  customer_id_ASC
  customer_id_DESC
  additional_info_ASC
  additional_info_DESC
  handle_id_ASC
  handle_id_DESC
}

type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""The group type is used to group contacts"""
type Procedure implements Node {
  handle_id: ID!
  node_name: String!
  node_meta_type: NodeHandleNodeMetaType!
  creator: User!
  created: DateTime!
  modifier: User!
  modified: DateTime!

  """The ID of the object."""
  id: ID!
  nidata: [DictEntryType]
  incoming: [DictRelationType]
  outgoing: [DictRelationType]
  name: String!
  description: String
}

type ProcedureConnection {
  pageInfo: PageInfo!
  edges: [ProcedureEdge]!
}

type ProcedureEdge {
  """The item at the end of the edge"""
  node: Procedure

  """A cursor for use in pagination"""
  cursor: String!
}

input ProcedureFilter {
  AND: [ProcedureNestedFilter!]
  OR: [ProcedureNestedFilter!]
}

input ProcedureNestedFilter {
  name: String
  name_not: String
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_in: [String!]
  name_not_in: [String!]
  description: String
  description_not: String
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_in: [String!]
  description_not_in: [String!]
  handle_id: Int
  handle_id_not: Int
  handle_id_lt: Int
  handle_id_lte: Int
  handle_id_gt: Int
  handle_id_gte: Int
  handle_id_in: [Int!]
  handle_id_not_in: [Int!]
}

"""An enumeration."""
enum ProcedureOrderBy {
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  handle_id_ASC
  handle_id_DESC
}

type Query {
  """The ID of the object"""
  node(id: ID!): Node
  getNodeById(handle_id: Int): NodeHandler
  getAvailableDropdowns: [String]
  getChoicesForDropdown(name: String!): [KeyValue]
  getRelationById(relation_id: Int!): NIRelationType
  getRoleById(relation_id: Int!): Role
  groups(filter: GroupFilter, orderBy: GroupOrderBy, before: String, after: String, first: Int, last: Int): GroupConnection
  getGroupById(handle_id: Int): Group
  contacts(filter: ContactFilter, orderBy: ContactOrderBy, before: String, after: String, first: Int, last: Int): ContactConnection
  getContactById(handle_id: Int): Contact
  organizations(filter: OrganizationFilter, orderBy: OrganizationOrderBy, before: String, after: String, first: Int, last: Int): OrganizationConnection
  getOrganizationById(handle_id: Int): Organization
  procedures(filter: ProcedureFilter, orderBy: ProcedureOrderBy, before: String, after: String, first: Int, last: Int): ProcedureConnection
  getProcedureById(handle_id: Int): Procedure
}

type Role {
  relation_id: Int!
  type: String!
  start: Int!
  end: Int!
  nidata: [DictEntryType]
  start_node: NIObjectType
  end_node: Organization
  name: String
}

input RoleInputField {
  relation_id: Int
  name: String
}

input UpdateNIContactMutationInput {
  first_name: String!
  last_name: String!
  contact_type: String!
  mobile: String
  phone: String
  salutation: String
  email: String
  other_email: String
  name: String
  title: String
  PGP_fingerprint: String
  relationship_works_for: String
  relationship_member_of: String
  role_name: String
  handle_id: Int!
  clientMutationId: String
}

type UpdateNIContactMutationPayload {
  contact: Contact
  clientMutationId: String
}

input UpdateNIGroupMutationInput {
  name: String!
  relationship_member_of: String
  handle_id: Int!
  clientMutationId: String
}

type UpdateNIGroupMutationPayload {
  group: Group
  clientMutationId: String
}

input UpdateNIOrganizationMutationInput {
  account_id: String
  name: String!
  description: String
  phone: String
  website: String
  customer_id: String
  type: String
  additional_info: String
  relationship_parent_of: String
  relationship_uses_a: String
  handle_id: Int!
  clientMutationId: String
}

type UpdateNIOrganizationMutationPayload {
  organization: Organization
  clientMutationId: String
}

input UpdateNIProcedureMutationInput {
  name: String!
  description: String
  handle_id: Int!
  clientMutationId: String
}

type UpdateNIProcedureMutationPayload {
  procedure: Procedure
  clientMutationId: String
}

"""The django user type"""
type User {
  id: ID!
  password: String!
  last_login: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  is_superuser: Boolean!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  first_name: String!
  last_name: String!
  email: String!

  """Designates whether the user can log into this admin site."""
  is_staff: Boolean!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  is_active: Boolean!
  date_joined: DateTime!
}

