type Choice {
  id: ID!
  dropdown: Dropdown!
  name: String!
  value: String!
}

type Contact implements Node {
  handle_id: ID!
  node_name: String!
  node_meta_type: NodeHandleNodeMetaType!
  creator: User!
  created: DateTime!
  modifier: User!
  modified: DateTime!

  """The ID of the object."""
  id: ID!
  name: String!
  first_name: String!
  last_name: String!
  title: String
  salutation: String
  contact_type: String
  phone: String
  mobile: String
  email: String
  other_email: String
  PGP_fingerprint: String
  is_roles: [Role]
  member_of_groups: [Group]
  nidata: [DictEntryType]
}

type ContactConnection {
  pageInfo: PageInfo!
  edges: [ContactEdge]!
}

type ContactEdge {
  """The item at the end of the edge"""
  node: Contact

  """A cursor for use in pagination"""
  cursor: String!
}

input ContactFilter {
  name: String!
  name_not: String!
  name_lt: String!
  name_lte: String!
  name_gt: String!
  name_gte: String!
  name_contains: String!
  name_not_contains: String!
  name_starts_with: String!
  name_not_starts_with: String!
  name_ends_with: String!
  name_not_ends_with: String!
  first_name: String!
  first_name_not: String!
  first_name_lt: String!
  first_name_lte: String!
  first_name_gt: String!
  first_name_gte: String!
  first_name_contains: String!
  first_name_not_contains: String!
  first_name_starts_with: String!
  first_name_not_starts_with: String!
  first_name_ends_with: String!
  first_name_not_ends_with: String!
  last_name: String!
  last_name_not: String!
  last_name_lt: String!
  last_name_lte: String!
  last_name_gt: String!
  last_name_gte: String!
  last_name_contains: String!
  last_name_not_contains: String!
  last_name_starts_with: String!
  last_name_not_starts_with: String!
  last_name_ends_with: String!
  last_name_not_ends_with: String!
  title: String
  title_not: String
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  salutation: String
  salutation_not: String
  salutation_lt: String
  salutation_lte: String
  salutation_gt: String
  salutation_gte: String
  salutation_contains: String
  salutation_not_contains: String
  salutation_starts_with: String
  salutation_not_starts_with: String
  salutation_ends_with: String
  salutation_not_ends_with: String
  contact_type: String
  contact_type_not: String
  contact_type_lt: String
  contact_type_lte: String
  contact_type_gt: String
  contact_type_gte: String
  contact_type_contains: String
  contact_type_not_contains: String
  contact_type_starts_with: String
  contact_type_not_starts_with: String
  contact_type_ends_with: String
  contact_type_not_ends_with: String
  phone: String
  phone_not: String
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  mobile: String
  mobile_not: String
  mobile_lt: String
  mobile_lte: String
  mobile_gt: String
  mobile_gte: String
  mobile_contains: String
  mobile_not_contains: String
  mobile_starts_with: String
  mobile_not_starts_with: String
  mobile_ends_with: String
  mobile_not_ends_with: String
  email: String
  email_not: String
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  other_email: String
  other_email_not: String
  other_email_lt: String
  other_email_lte: String
  other_email_gt: String
  other_email_gte: String
  other_email_contains: String
  other_email_not_contains: String
  other_email_starts_with: String
  other_email_not_starts_with: String
  other_email_ends_with: String
  other_email_not_ends_with: String
  PGP_fingerprint: String
  PGP_fingerprint_not: String
  PGP_fingerprint_lt: String
  PGP_fingerprint_lte: String
  PGP_fingerprint_gt: String
  PGP_fingerprint_gte: String
  PGP_fingerprint_contains: String
  PGP_fingerprint_not_contains: String
  PGP_fingerprint_starts_with: String
  PGP_fingerprint_not_starts_with: String
  PGP_fingerprint_ends_with: String
  PGP_fingerprint_not_ends_with: String
  name_in: [String!]
  name_not_in: [String!]
  first_name_in: [String!]
  first_name_not_in: [String!]
  last_name_in: [String!]
  last_name_not_in: [String!]
  title_in: [String!]
  title_not_in: [String!]
  salutation_in: [String!]
  salutation_not_in: [String!]
  contact_type_in: [String!]
  contact_type_not_in: [String!]
  phone_in: [String!]
  phone_not_in: [String!]
  mobile_in: [String!]
  mobile_not_in: [String!]
  email_in: [String!]
  email_not_in: [String!]
  other_email_in: [String!]
  other_email_not_in: [String!]
  PGP_fingerprint_in: [String!]
  PGP_fingerprint_not_in: [String!]
}

type CreateNIContactMutation {
  contact: Contact
  clientMutationId: String
}

input CreateNIContactMutationInput {
  first_name: String!
  last_name: String!
  contact_type: String!
  mobile: String
  phone: String
  salutation: String
  email: String
  other_email: String
  name: String
  title: String
  PGP_fingerprint: String
  clientMutationId: String
}

type CreateNIGroupMutation {
  group: Group
  clientMutationId: String
}

input CreateNIGroupMutationInput {
  name: String!
  clientMutationId: String
}

type CreateNIRoleMutation {
  role: Role
  clientMutationId: String
}

input CreateNIRoleMutationInput {
  name: String!
  clientMutationId: String
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type DeleteNIContactMutation {
  contact: Contact
  clientMutationId: String
}

input DeleteNIContactMutationInput {
  handle_id: Int!
  clientMutationId: String
}

type DeleteNIGroupMutation {
  group: Group
  clientMutationId: String
}

input DeleteNIGroupMutationInput {
  handle_id: Int!
  clientMutationId: String
}

type DeleteNIRoleMutation {
  role: Role
  clientMutationId: String
}

input DeleteNIRoleMutationInput {
  handle_id: Int!
  clientMutationId: String
}

"""
This type represents an key value pair in a dictionary for the data
dict of the norduniclient nodes
"""
type DictEntryType {
  key: String!
  value: String!
}

type Dropdown {
  id: ID!
  name: String!
  choice_set: [Choice]
}

type Group implements Node {
  handle_id: ID!
  node_name: String!
  node_meta_type: NodeHandleNodeMetaType!
  creator: User!
  created: DateTime!
  modifier: User!
  modified: DateTime!

  """The ID of the object."""
  id: ID!
  name: String!
  nidata: [DictEntryType]
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
}

type GroupEdge {
  """The item at the end of the edge"""
  node: Group

  """A cursor for use in pagination"""
  cursor: String!
}

input GroupFilter {
  name: String!
  name_not: String!
  name_lt: String!
  name_lte: String!
  name_gt: String!
  name_gte: String!
  name_contains: String!
  name_not_contains: String!
  name_starts_with: String!
  name_not_starts_with: String!
  name_ends_with: String!
  name_not_ends_with: String!
  name_in: [String!]
  name_not_in: [String!]
}

type Mutation {
  create_role(input: CreateNIRoleMutationInput!): CreateNIRoleMutation
  update_role(input: UpdateNIRoleMutationInput!): UpdateNIRoleMutation
  delete_role(input: DeleteNIRoleMutationInput!): DeleteNIRoleMutation
  create_group(input: CreateNIGroupMutationInput!): CreateNIGroupMutation
  update_group(input: UpdateNIGroupMutationInput!): UpdateNIGroupMutation
  delete_group(input: DeleteNIGroupMutationInput!): DeleteNIGroupMutation
  create_contact(input: CreateNIContactMutationInput!): CreateNIContactMutation
  update_contact(input: UpdateNIContactMutationInput!): UpdateNIContactMutation
  delete_contact(input: DeleteNIContactMutationInput!): DeleteNIContactMutation
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""An enumeration."""
enum NodeHandleNodeMetaType {
  """Physical"""
  PHYSICAL

  """Logical"""
  LOGICAL

  """Relation"""
  RELATION

  """Location"""
  LOCATION
}

type NodeHandler implements Node {
  handle_id: ID!
  node_name: String!
  node_meta_type: NodeHandleNodeMetaType!
  creator: User!
  created: DateTime!
  modifier: User!
  modified: DateTime!

  """The ID of the object."""
  id: ID!
  nidata: [DictEntryType]
}

type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """The ID of the object"""
  node(id: ID!): Node
  getNodeById(handle_id: Int): NodeHandler
  getChoicesForDropdown(name: String!): [Choice]
  roles(filter: RoleFilter, before: String, after: String, first: Int, last: Int): RoleConnection
  getRoleById(handle_id: Int): Role
  groups(filter: GroupFilter, before: String, after: String, first: Int, last: Int): GroupConnection
  getGroupById(handle_id: Int): Group
  contacts(filter: ContactFilter, before: String, after: String, first: Int, last: Int): ContactConnection
  getContactById(handle_id: Int): Contact
}

type Role implements Node {
  handle_id: ID!
  node_name: String!
  node_meta_type: NodeHandleNodeMetaType!
  creator: User!
  created: DateTime!
  modifier: User!
  modified: DateTime!

  """The ID of the object."""
  id: ID!
  name: String!
  nidata: [DictEntryType]
}

type RoleConnection {
  pageInfo: PageInfo!
  edges: [RoleEdge]!
}

type RoleEdge {
  """The item at the end of the edge"""
  node: Role

  """A cursor for use in pagination"""
  cursor: String!
}

input RoleFilter {
  name: String!
  name_not: String!
  name_lt: String!
  name_lte: String!
  name_gt: String!
  name_gte: String!
  name_contains: String!
  name_not_contains: String!
  name_starts_with: String!
  name_not_starts_with: String!
  name_ends_with: String!
  name_not_ends_with: String!
  name_in: [String!]
  name_not_in: [String!]
}

type UpdateNIContactMutation {
  contact: Contact
  clientMutationId: String
}

input UpdateNIContactMutationInput {
  first_name: String!
  last_name: String!
  contact_type: String!
  mobile: String
  phone: String
  salutation: String
  email: String
  other_email: String
  name: String
  title: String
  PGP_fingerprint: String
  relationship_works_for: String
  relationship_member_of: String
  relationship_is: String
  handle_id: Int!
  clientMutationId: String
}

type UpdateNIGroupMutation {
  group: Group
  clientMutationId: String
}

input UpdateNIGroupMutationInput {
  name: String!
  description: String
  relationship_member_of: String
  handle_id: Int!
  clientMutationId: String
}

type UpdateNIRoleMutation {
  role: Role
  clientMutationId: String
}

input UpdateNIRoleMutationInput {
  name: String!
  handle_id: Int!
  clientMutationId: String
}

type User {
  id: ID!
  password: String!
  last_login: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  is_superuser: Boolean!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  first_name: String!
  last_name: String!
  email: String!

  """Designates whether the user can log into this admin site."""
  is_staff: Boolean!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  is_active: Boolean!
  date_joined: DateTime!
}

